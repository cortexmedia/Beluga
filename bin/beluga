#!/bin/bash
#######################################################################
# All information contained herein is, and remains
# the property of Cortex Media and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Cortex Media and its suppliers
# and may be covered by Canada and Foreign Patents,
# and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from Cortex Media.
#
# copyright    Cortex Media 2015
#
# author    Mathieu Rh√©aume
#######################################################################
set -e

set_base_directory() {
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      TARGET="$(readlink "$SOURCE")"
      if [[ $SOURCE == /* ]]; then
        SOURCE="$TARGET"
      else
        DIR="$( dirname "$SOURCE" )"
        SOURCE="$DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
      fi
    done

    BASE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    export BASE_DIR
}

show_help() {
    echo "Copyright (c) 2015 Cortex (cortex.bz)"
    echo "Beluga (0.0.1-alpha). Usage :"
    echo "beluga [--build args] [--deploy args]"
    echo "-b Build the docker container and push to repository."
    echo "-p Connects via ssh to remote host and pulls the images."
    echo "-d Runs the build push and pull options."
    echo "-c Connects via ssh and removed all unused tags and containers."
}

####################
# MAIN APP RUNTIME #
####################
set_base_directory

for i in "$@"
do
case $i in
  -b|-b=*|--build|--build=*)
    "$BASE_DIR/../scripts/BuildAndPush.sh"
    exit 0
    shift
    ;;
  -p=*|-p|--pull|--pull=*)
    "$BASE_DIR/../scripts/Pull.sh"
    exit 0
    shift
    ;;
  -c|-c=*|--clean|--clean=*)
    "$BASE_DIR/../scripts/Clean.sh"
    exit 0
    shift
    ;;
  -d=*|-d|--deploy|--deploy=*)
    "$BASE_DIR/../scripts/BuildAndPush.sh"
    if [ $? -ne 0 ]; then
      echo "The build failed."
      exit 1
    else
      "$BASE_DIR/../scripts/Pull.sh"
    fi
    exit 0
    shift
    ;;
  *)
    show_help
    exit 0
    ;;
esac
done

show_help
